var documenterSearchIndex = {"docs":
[{"location":"#Effort.jl","page":"Home","title":"Effort.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Effort is a Julia package designed to emulate the computation of the Effective Field Theory of Large Scale Structure, as computed by PyBird. An emulator is a surrogate model, a computational technique that can mimick the behaviour of computationally expensive functions, with a speedup of several orders of magnitude.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The example page shows how to use Effort.jl, while showing its computational performance","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Marco Bonici, INAF - Institute of Space Astrophysics and Cosmic Physics (IASF), Milano\nGuido D'Amico, Università Degli Studi di Parma","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please make sure to update tests as appropriate.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Effort is licensed under the MIT \"Expat\" license; see LICENSE for the full license text.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"using Plots; gr()\nPlots.reset_defaults()\nusing BenchmarkTools\ndefault(palette = palette(:tab10))\nbenchmark = BenchmarkTools.load(\"./assets/effort_benchmark.json\")","category":"page"},{"location":"example/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"In order to use Effort you need a trained emulator (after the first release, we will make them available on Zenodo). There are two different categories of trained emulators:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"single component emulators (e.g.  P_11, P_mathrmloop, P_mathrmct)\ncomplete emulators, containing all the three different component emulators","category":"page"},{"location":"example/#Basic-usage","page":"Example","title":"Basic usage","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Let us show how to use Effort.jl to compute Power Spectrum Multipoles.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"First of all, we need some trained emulators, then we can use the Effort.get_Pℓ function","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Effort.get_Pℓ","category":"page"},{"location":"example/#Effort.get_Pℓ","page":"Example","title":"Effort.get_Pℓ","text":"get_Pℓ(cosmology::Array, bs::Array, f, cosmoemu::AbstractPℓEmulators)\n\nCompute the Pℓ array given the cosmological parameters array cosmology, the bias array bs, the growth factor f and an AbstractEmulator.\n\n\n\n\n\n","category":"function"},{"location":"example/","page":"Example","title":"Example","text":"info: Trained emulators\nRight now we do not provide any emulator, but with the paper publication we will release several trained emulators on Zenodo.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"import Effort\nPct_comp_array = Effort.compute_component(input_test, Pct_Mono_emu) #compute the components of Pct without the bias\nPct_array_Effort = Array{Float64}(zeros(length(Pct_comp_array[1,:]))) #allocate final array\nEffort.bias_multiplication!(Pct_array_Effort, bct, Pct_comp_array) #components multiplied by bias\nEffort.get_Pℓ(input_test, bs, f, Pℓ_Mono_emu) # whole multipole computation","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Here we are using a ComponentEmulators, which can compute one of the components as predicted by PyBird, and MultipoleEmualator, which emulates an entire multipole.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"This computation is quite fast: a benchmark performed locally, with a 12th Gen Intel® Core™ i7-1260P, gives the following result for a multipole computation","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"benchmark[1][\"Effort\"][\"Monopole\"] # hide","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"The result of these computations look like this (Image: effort)","category":"page"},{"location":"example/#Alcock-Paczyński-effect","page":"Example","title":"Alcock-Paczyński effect","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"The Alcock-Paczyński (AP) effect can be included in two different ways:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"by training the emulators using spectra where the AP effect has already been applied\nby using standard trained emulators and applying analitycally the AP effect","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"While the former approach is computationally faster (there is no overhead from the NN point-of-view), the latter is more flexible, since the reference cosmology for the AP effect computation can be changed at runtime.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Regarding the second approach, the most important choice regards the algorithm employed to compute the following integral","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"P_ell mathrmAP(k)=frac2 ell+12 int_-1^1 d mu_mathrmobs P_mathrmobsleft(k_mathrmobs mu_mathrmobsright) cdot mathcalP_ellleft(mu_mathrmobsright)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Here we implement two different approaches:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"an approach based on QuadGK.jl. This approach is the most precise, since it uses an adaptive method to compute the AP projection integral.\nan approach based on FastGaussQuadrature.jl. This approach is the fastest, since we are going to employ only 4 points (!!!) to compute the AP projection integral, taking advantage of the Gauss-Lobatto quadrature rule","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Let us start with the Gauss-Kronrod quadrature!","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Effort.apply_AP_check","category":"page"},{"location":"example/#Effort.apply_AP_check","page":"Example","title":"Effort.apply_AP_check","text":"apply_AP_check(k_grid::Array, Mono_array::Array, Quad_array::Array, Hexa_array::Array,\nq_par, q_perp)\n\nGiven the Monopole, the Quadrupole, the Hexadecapole, and the k-grid, this function apply the AP effect using the Gauss-Kronrod adaptive quadrature. Precise, but expensive, function. Mainly used for check and debugging purposes.\n\n\n\n\n\n","category":"function"},{"location":"example/","page":"Example","title":"Example","text":"import Effort\nEffort.apply_AP_check(k_test, Mono_Effort, Quad_Effort, Hexa_Effort,  q_par, q_perp)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"benchmark[1][\"Effort\"][\"AP_GK\"] # hide","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"As said, this is precise but a bit expensive from a computational point of view. What about Gauss-Lobatto?","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Effort.apply_AP","category":"page"},{"location":"example/#Effort.apply_AP","page":"Example","title":"Effort.apply_AP","text":"apply_AP(k_grid::Array, Mono_array::Array, Quad_array::Array, Hexa_array::Array, q_par,\nq_perp)\n\nGiven the Monopole, the Quadrupole, the Hexadecapole, and the k-grid, this function apply the AP effect using the Gauss-Lobatto quadrature. Fast but accurate,  well tested against adaptive Gauss-Kronrod integration.\n\n\n\n\n\n","category":"function"},{"location":"example/","page":"Example","title":"Example","text":"import Effort\nEffort.apply_AP(k_test, Mono_Effort, Quad_Effort, Hexa_Effort,  q_par, q_perp)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"benchmark[1][\"Effort\"][\"AP_GL\"] # hide","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Blazingly fast! And also accurate! A comparison with the GK-based rule show a percentual relative difference of about 000001 for the Hexadecapole, with a higher precision for the other two multipoles.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: gk_gl_residuals)","category":"page"}]
}
